{"version":3,"sources":["images/arrowLeft.svg","images/delete.svg","images/cancel.svg","images/accept.svg","images/user-plus-solid.svg","components/contactForm.jsx","components/addContact.jsx","components/updateContact.jsx","components/contactList.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","ContactForm","props","state","name","phoneNumber","email","emailWrong","phoneNumberWrong","statusHandler","bind","numberHandler","handleSubmit","cancelAddContact","cancelUpdateContact","getFormValues","handleUpdateContact","validatePhoneNumber","validateEmail","this","setState","console","log","contacts","event","target","value","test","preventDefault","alert","addContact","backToHome","toggleUpdate","id","contact","updateContact","regex","undefined","some","isListItem","filteredId","findIndex","obj","filteredPhone","splitEmail","split","length","title","cancel","warning1","warning2","onsubmit","type","height","width","src","BackArrow","alt","onClick","className","Fragment","onSubmit","defaultValue","onChange","onKeyUp","Component","AddContact","newContact","incrementId","slice","push","addToList","addContactToList","updateList","index","updateValue","updateState","ContactList","filtered","confirmDelete","search","newList","filter","item","searchName","toString","toLowerCase","searchEmail","includes","deleteContact","prevState","activateEdit","deActivateEdit","listOnClick","prevProps","refs","searchInput","placeholder","ref","map","key","handleClick","style","cursor","editMode","Accept","Cancel","Delete","App","isHomeOpen","isAddContactOpen","showPopup","showUpdateContact","newIndex","cont","filteredList","ContactPic","togglePopup","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c64c7163.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/arrowLeft.713fe29d.svg\";","module.exports = __webpack_public_path__ + \"static/media/delete.da296998.svg\";","module.exports = __webpack_public_path__ + \"static/media/cancel.2c5552a1.svg\";","module.exports = __webpack_public_path__ + \"static/media/accept.ce8e2a41.svg\";","module.exports = __webpack_public_path__ + \"static/media/user-plus-solid.7465375f.svg\";","import React, { Component } from \"react\";\r\nimport \"../App.css\";\r\nimport BackArrow from \"../images/arrowLeft.svg\";\r\n\r\nclass ContactForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            name: \"\",\r\n            phoneNumber: \"\",\r\n            email: \"\",\r\n            emailWrong: false,\r\n            phoneNumberWrong: false\r\n        }\r\n\r\n        var contacts = [];\r\n\r\n        this.statusHandler = this.statusHandler.bind(this);\r\n        this.numberHandler = this.numberHandler.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.cancelAddContact = this.cancelAddContact.bind(this);\r\n        this.cancelUpdateContact = this.cancelUpdateContact.bind(this);\r\n        this.getFormValues = this.getFormValues.bind(this);\r\n        this.handleUpdateContact = this.handleUpdateContact.bind(this);\r\n        this.validatePhoneNumber = this.validatePhoneNumber.bind(this);\r\n        this.validateEmail = this.validateEmail.bind(this);\r\n    }\r\n\r\n    //\r\n\r\n    getFormValues() {\r\n        var name = this.props.name;\r\n        var phoneNumber = this.props.phoneNumber;\r\n        var email = this.props.email;\r\n        this.setState({\r\n            name: [name],\r\n            phoneNumber: [phoneNumber],\r\n            email: [email]\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        this.getFormValues();\r\n        console.log(this.props.contacts);\r\n\r\n\r\n    }\r\n\r\n\r\n    // Updates input text when writing\r\n    statusHandler(event) {\r\n\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        })\r\n\r\n    }\r\n    // only allows numbers and + sign to be written\r\n    numberHandler(event) {\r\n        const regex = /^[0-9\\b\\+]+$/;\r\n        if (event.target.value === \"\" || regex.test(event.target.value) === true) {\r\n\r\n            this.setState({ [event.target.name]: event.target.value })\r\n        }\r\n    }\r\n\r\n    // When user presses save, adds contact\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        console.log(event.target.name.value);\r\n        var name = event.target.name.value;\r\n        var phoneNumber = event.target.phoneNumber.value;\r\n        var email = event.target.email.value;\r\n\r\n        console.log(\"validation states:\");\r\n        console.log(this.state.emailWrong);\r\n        console.log(this.state.phoneNumberWrong);\r\n\r\n\r\n        if (this.state.emailWrong || this.state.phoneNumberWrong || phoneNumber === \"\" || email === \"\") {\r\n            alert(\"form not valid yet\");\r\n        }\r\n        else {\r\n            this.props.addContact(name, phoneNumber, email);\r\n        }\r\n\r\n\r\n    }\r\n\r\n    // Takes user back to homepage\r\n    cancelAddContact() {\r\n        this.props.backToHome();\r\n    }\r\n    cancelUpdateContact() {\r\n        this.props.toggleUpdate();\r\n    }\r\n\r\n    // updates the contact\r\n\r\n    handleUpdateContact(event) {\r\n        event.preventDefault();\r\n        var name = event.target.name.value;\r\n        var phoneNumber = event.target.phoneNumber.value;\r\n        var email = event.target.email.value;\r\n        var id = this.props.id;\r\n        var contact = { 'name': name, 'phoneNumber': phoneNumber, 'email': email, 'id': id };\r\n        console.log(\"id:\");\r\n        console.log(id);\r\n        if (this.state.emailWrong || this.state.phoneNumberWrong) {\r\n            alert(\"form not valid yet\");\r\n        }\r\n        else {\r\n            this.props.updateContact(contact)\r\n        }\r\n\r\n    }\r\n\r\n    validatePhoneNumber(event) {\r\n        event.preventDefault();\r\n\r\n\r\n\r\n\r\n\r\n        var regex = /^((04[0-9]{1})(\\s?|-?)|019(\\s?|-?)|[+]?358(\\s?|-?)19|050(\\s?|-?)|0457(\\s?|-?)|[+]?358(\\s?|-?)50|0358(\\s?|-?)50|00358(\\s?|-?)50|[+]?358(\\s?|-?)4[0-9]{1}|0358(\\s?|-?)4[0-9]{1}|00358(\\s?|-?)4[0-9]{1})(\\s?|-?)(([0-9]{3,4})(\\s|\\-)?[0-9]{2,3})$/;\r\n\r\n        if (event.target.value === undefined) {\r\n            this.setState({\r\n                phoneNumberWrong: true\r\n            })\r\n        }\r\n\r\n        else if (regex.test(event.target.value) === false) {\r\n            this.setState({\r\n                phoneNumberWrong: true\r\n\r\n            })\r\n\r\n        }\r\n        else if (this.props.contacts.some(contact => contact.phoneNumber === event.target.value) === true) {\r\n\r\n\r\n            if (this.props.isListItem) {\r\n                var filteredId = this.props.contacts.findIndex(obj => obj.id === this.props.id);\r\n                var filteredPhone = this.props.contacts.findIndex(obj => obj.phoneNumber === event.target.value);\r\n\r\n\r\n                if (regex.test(event.target.value) === false || filteredId !== filteredPhone) {\r\n                    this.setState({\r\n                        phoneNumberWrong: true\r\n                    })\r\n                }\r\n                else {\r\n                    this.setState({\r\n                        phoneNumberWrong: false\r\n                    })\r\n                }\r\n            }\r\n            else {\r\n                this.setState({\r\n                    phoneNumberWrong: true\r\n                })\r\n            }\r\n\r\n\r\n\r\n\r\n        }\r\n        else {\r\n            this.setState({\r\n                phoneNumberWrong: false\r\n            })\r\n        }\r\n    }\r\n\r\n    validateEmail(event) {\r\n        var splitEmail = event.target.value.split(\"@\");\r\n        if (splitEmail[0].length < 3 && splitEmail !== undefined) {\r\n            this.setState({\r\n                emailWrong: true\r\n            })\r\n        }\r\n        else {\r\n            this.setState({\r\n                emailWrong: false\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        var isListItem = this.props.isListItem;\r\n        var title;\r\n        var cancel;\r\n        var onSubmit;\r\n        var phoneNumberWrong = this.state.phoneNumberWrong;\r\n        var emailWrong = this.state.emailWrong\r\n        var warning1;\r\n        var warning2;\r\n\r\n\r\n\r\n        if (emailWrong) {\r\n            warning1 = <p>Please write valid email</p>\r\n        }\r\n        if (phoneNumberWrong) {\r\n            warning2 = <p>Either this phonenumber already exists or it is not valid</p>\r\n        }\r\n\r\n        if (isListItem) {\r\n            this.state.name = this.props.name\r\n            title = <h1>View Contact</h1>;\r\n\r\n            onsubmit = this.handleUpdateContact;\r\n\r\n            cancel = <input type=\"image\" height=\"30\" width=\"30\" src={BackArrow} alt=\"\" value=\"Cancel\" onClick={this.cancelUpdateContact}></input>\r\n        }\r\n\r\n        else {\r\n\r\n            title = <h1>Add Contact</h1>;\r\n            onsubmit = this.handleSubmit;\r\n\r\n            cancel = <input className=\"button\" type=\"button\" value=\"Cancel\" onClick={this.cancelAddContact}></input>\r\n            //          onSubmit = this.handleSubmit;\r\n\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"contactContainer\">\r\n                    <div className=\"contactForm\">\r\n\r\n\r\n                        <form className=\"form\" onSubmit={onSubmit}>\r\n                            {title}\r\n                            <label>\r\n                                Name:\r\n                    </label>\r\n                            <br />\r\n                            <input\r\n                                name=\"name\"\r\n                                type=\"text\"\r\n                                defaultValue={this.props.name}\r\n                                onChange={this.statusHandler}\r\n                            />\r\n\r\n                            <br />\r\n                            <br />\r\n                            <label>\r\n                                Phonenumber:\r\n                    </label>\r\n                            <br />\r\n                            <input\r\n                                name=\"phoneNumber\"\r\n                                type=\"text\"\r\n                                defaultValue={this.props.phoneNumber}\r\n                                onChange={this.numberHandler}\r\n                                onKeyUp={this.validatePhoneNumber}\r\n                            />\r\n                            {warning2}\r\n\r\n                            <br />\r\n                            <br />\r\n\r\n                            <label>\r\n                                Email:\r\n                    </label>\r\n                            <br />\r\n                            <input\r\n                                name=\"email\"\r\n                                type=\"email\"\r\n                                defaultValue={this.props.email}\r\n                                onChange={this.statusHandler}\r\n                                onKeyUp={this.validateEmail}\r\n                            />\r\n                            {warning1}\r\n                            <br /> <br />\r\n                            {cancel}\r\n                            <div className=\"divider\" />\r\n                            <input\r\n                                type=\"submit\"\r\n                                value=\"Save\"\r\n                                className=\"buttons\"\r\n                            />\r\n                        </form>\r\n\r\n\r\n                    </div>\r\n                </div>\r\n\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n\r\n\r\n}\r\nexport default ContactForm;","import React, { Component } from \"react\";\r\nimport ContactForm from \"./contactForm\";\r\n\r\nclass AddContact extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            emailWrong: false,\r\n            phoneNumberWrong: false,\r\n            newContact: true\r\n\r\n        }\r\n    }\r\n    // validates the contact and then either adds contact to list or if not valid, says to try again\r\n\r\n\r\n\r\n    // adds contact to list\r\n    addContactToList(name, phoneNumber, email) {\r\n        var obj = { 'name': name, 'phoneNumber': phoneNumber, 'email': email, 'editMode': false, 'id': this.props.incrementId() };\r\n        const newContact = this.props.contacts.slice();\r\n        newContact.push(obj);\r\n        this.props.addToList(newContact);\r\n        console.log(\"new contact\");\r\n        console.log(this.props.contacts);\r\n        console.log(\"islistitem\");\r\n        console.log(this.props.isListItem);\r\n\r\n        this.props.backToHome();\r\n\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"addContact\">\r\n\r\n\r\n                <React.Fragment>\r\n                    <ContactForm\r\n                        backToHome={this.props.backToHome}\r\n                        addContact={this.addContactToList.bind(this)}\r\n                        emailWrong={this.state.emailWrong}\r\n                        phoneNumberWrong={this.state.phoneNumberWrong}\r\n                        contacts={this.props.contacts}\r\n                        newContact={this.state.newContact}\r\n\r\n                    />\r\n                </React.Fragment>\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n}\r\nexport default AddContact;","import React, { Component } from \"react\";\r\nimport ContactForm from \"./contactForm\";\r\nimport { render } from \"@testing-library/react\";\r\n\r\nclass updateContact extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            emailWrong: false,\r\n            phoneNumberWrong: false\r\n        }\r\n    }\r\n    // Validates contact and then updates the contact\r\n    updateContact(contact) {\r\n        console.log(\"we are here\");\r\n        console.log(\"id\");\r\n        console.log(contact.id);\r\n        console.log(contact.phoneNumber);\r\n        this.props.updateList(contact, this.props.index);\r\n        this.props.toggleUpdate();\r\n\r\n    }\r\n    // allows to write into input field\r\n    updateState(event) {\r\n        this.props.updateValue(event);\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n\r\n\r\n\r\n            <ContactForm\r\n                isListItem={this.props.isListItem}\r\n                backToHome={this.props.backToHome}\r\n                name={this.props.name}\r\n                phoneNumber={this.props.phoneNumber}\r\n                email={this.props.email}\r\n                updateContact={this.updateContact.bind(this)}\r\n                updateState={this.updateState.bind(this)}\r\n                emailWrong={this.state.emailWrong}\r\n                phoneNumberWrong={this.state.phoneNumberWrong}\r\n                contacts={this.props.contacts}\r\n                index={this.props.index}\r\n                id={this.props.id}\r\n                toggleUpdate={this.props.toggleUpdate}\r\n            />\r\n\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default updateContact;","import React, { Component } from \"react\";\r\nimport Delete from \"../images/delete.svg\";\r\nimport Cancel from \"../images/cancel.svg\";\r\nimport Accept from \"../images/accept.svg\";\r\n\r\nclass ContactList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            filtered: [],\r\n            confirmDelete: {},\r\n\r\n        }\r\n\r\n        this.search = this.search.bind(this);\r\n\r\n    }\r\n    // Allows user to search contacts by name and email\r\n    search(event) {\r\n        let currentList = [];\r\n        let newList = [];\r\n\r\n        if (event.target.value !== \"\") {\r\n            currentList = this.props.contacts;\r\n            newList = currentList.filter(item => {\r\n                const searchName = item.name.toString().toLowerCase();\r\n                const searchEmail = item.email.toString().toLowerCase();\r\n                const filter = event.target.value.toString().toLowerCase();\r\n\r\n                return (\r\n                    searchName.includes(filter) +\r\n                    searchEmail.includes(filter)\r\n                );\r\n            });\r\n        } else {\r\n            newList = this.props.contacts;\r\n        }\r\n        this.setState({\r\n            filtered: newList\r\n        })\r\n        console.log(\"after search\");\r\n        console.log(this.state.filtered);\r\n        console.log(newList);\r\n\r\n    }\r\n\r\n    // needed so list can be mapped\r\n    componentDidMount() {\r\n        console.log(\"is called\");\r\n        this.setState({\r\n            filtered: this.props.contacts\r\n        });\r\n        console.log(\"filtered list on didmount\");\r\n        console.log(this.state.filtered);\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    // Checks which button is clicked and acts accordingly.\r\n    handleClick(contact, index, event) {\r\n\r\n\r\n        if (event.target.name === \"deleteButton\") {\r\n            console.log(\"let's delete\");\r\n            this.props.deleteContact(contact);\r\n\r\n            this.setState(prevState => ({\r\n                filtered: prevState.filtered.filter(contact => contact !== contact)\r\n            }));\r\n\r\n            console.log(\"new filtered list:\");\r\n            console.log(this.state.filtered);\r\n            console.log(this.props.contacts);\r\n\r\n\r\n        }\r\n        else if (event.target.name === \"deleteConfirm\") {\r\n\r\n            this.props.activateEdit(contact, index, this.state.filtered);\r\n            this.setState(prevState => ({\r\n                filtered: prevState.filtered.filter(contact => contact !== contact)\r\n            }));\r\n\r\n        }\r\n        else if (event.target.name === \"deleteCancel\") {\r\n            this.props.deActivateEdit(contact);\r\n\r\n        }\r\n        else {\r\n            this.props.listOnClick(contact, index);\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n\r\n        var newList = [];\r\n\r\n        if (prevProps.contacts !== this.props.contacts) {\r\n\r\n            if (this.refs.searchInput.value !== \"\") {\r\n                console.log(\"we are doing this\");\r\n                newList = this.props.contacts.filter(item => {\r\n                    const searchName = item.name.toString().toLowerCase();\r\n                    const searchEmail = item.email.toString().toLowerCase();\r\n                    const filter = this.refs.searchInput.value.toString().toLowerCase();\r\n\r\n                    return (\r\n                        searchName.includes(filter) +\r\n                        searchEmail.includes(filter)\r\n                    );\r\n                });\r\n            }\r\n            else {\r\n                newList = this.props.contacts\r\n            }\r\n            this.setState({\r\n                filtered: newList\r\n            });\r\n        }\r\n        console.log(this.state.filtered);\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n\r\n\r\n\r\n        if (this.state.filtered) {\r\n\r\n            return (\r\n\r\n\r\n                <div className=\"contactList\">\r\n\r\n\r\n                    <input type=\"text\"\r\n                        className=\"inputSearch\"\r\n                        placeholder=\"Search...\"\r\n                        onChange={this.search}\r\n                        ref=\"searchInput\"\r\n                    />\r\n\r\n\r\n\r\n\r\n                    <ul>\r\n                        {this.state.filtered.map((contact, index) =>\r\n                            <li key={contact.id}\r\n                                onClick={(event) =>\r\n                                    this.handleClick(contact, index, event)}\r\n                                style={{ cursor: 'pointer' }}\r\n                            >\r\n                                <div className=\"cell\">{contact.name}</div>\r\n                                {contact.editMode ? [<input\r\n                                    type=\"image\"\r\n                                    name=\"deleteButton\"\r\n                                    src={Accept}\r\n                                    alt=\"\"\r\n                                    width=\"20\"\r\n                                    height=\"20\"\r\n\r\n                                />, <input\r\n                                    type=\"image\"\r\n                                    alt=\"\"\r\n                                    name=\"deleteCancel\"\r\n                                    src={Cancel}\r\n                                    width=\"20\"\r\n                                    height=\"20\"\r\n                                />]\r\n                                    :\r\n                                    <input\r\n                                        type=\"image\"\r\n                                        name=\"deleteConfirm\"\r\n                                        src={Delete}\r\n                                        alt=\"\"\r\n                                        width=\"20\"\r\n                                        height=\"20\"\r\n                                    />}\r\n                            </li>)}\r\n                    </ul>\r\n\r\n\r\n                </div>\r\n            )\r\n        }\r\n\r\n        else {\r\n            return (\r\n                <div>\r\n                    <h1>ContactList</h1>\r\n                    <p>No contacts yet..</p>\r\n                </div>\r\n            )\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default ContactList;","import React, { Component } from 'react';\nimport AddContact from './components/addContact';\nimport UpdateContact from \"./components/updateContact\";\nimport ContactList from \"./components/contactList\";\nimport \"./App.css\";\nimport ContactPic from \"./images/user-plus-solid.svg\";\n\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isHomeOpen: true,\n      isAddContactOpen: false,\n      isListItem: false,\n      index: \"\",\n      filtered: [],\n      id: 0,\n      showPopup: false,\n      showUpdateContact: false,\n\n      contacts: []\n\n    }\n\n    this.backToHome = this.backToHome.bind(this);\n    this.updateValue = this.updateValue.bind(this);\n    this.updateList = this.updateList.bind(this);\n    this.deleteContact = this.deleteContact.bind(this);\n    this.listOnClick = this.listOnClick.bind(this);\n    this.activateEdit = this.activateEdit.bind(this);\n    this.deActivateEdit = this.deActivateEdit.bind(this);\n    this.toggleUpdate = this.toggleUpdate.bind(this);\n\n\n    //this.listOnClick = this.listOnClick.bind(this);\n\n\n  }\n\n\n  // add the new contact to list\n  addToList(obj) {\n    this.setState({\n      contacts: obj\n    })\n  }\n\n  incrementId() {\n    this.setState(prevState => ({\n      id: prevState.id + 1\n    }));\n    console.log(this.state.id);\n    return this.state.id\n  }\n\n  // update selected contact\n\n  updateList(contact, index) {\n    console.log(\"index\");\n    console.log(index);\n\n    let contacts = [...this.state.contacts];\n    console.log(contact.id);\n    var newIndex = contacts.findIndex(cont => cont.id === contact.id);\n    let item = { ...contacts[index] };\n    item.name = contact.name;\n    item.phoneNumber = contact.phoneNumber;\n    item.email = contact.email;\n    item.id = contact.id;\n    contacts[newIndex] = item;\n    this.setState({ contacts });\n    console.log(\"new index\");\n    console.log(newIndex);\n\n  }\n\n\n\n  // Change page view to AddContact\n  transferToAddContact() {\n    this.setState({\n      isAddContactOpen: true,\n      isHomeOpen: false\n    });\n\n  }\n  // When person clicks on the contact, open that contacts detail page\n  listOnClick(contact, index) {\n    console.log(index);\n    console.log(contact.name);\n    console.log(contact.phoneNumber);\n\n    this.setState({\n      isListItem: true,\n      name: contact.name,\n      phoneNumber: contact.phoneNumber,\n      email: contact.email,\n      index: [index],\n      id: contact.id\n    })\n    this.toggleUpdate();\n    console.log()\n\n  }\n  // Change view back to Homepage\n  backToHome() {\n    this.setState({\n      showPopup: !this.state.showPopup,\n      isListItem: false,\n    });\n  }\n  toggleUpdate() {\n    this.setState({\n      showUpdateContact: !this.state.showUpdateContact\n    })\n  }\n  // Allows to write into input fields\n  updateValue(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    })\n  }\n  // Delete contact from list\n  deleteContact(contacts) {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== contacts.id)\n    }));\n\n    console.log(\"let's see the contacts:\");\n    console.log(this.state.contacts);\n  }\n  // when user clicks delete button, opens up confirmation buttons\n  activateEdit(contact, index, filteredList) {\n    let contacts = [...this.state.contacts];\n\n    var newIndex = contacts.findIndex(cont => cont.id === contact.id);\n    contact.editMode = true\n    this.setState({ contacts });\n  }\n  // when user presses cancel when trying to delete a contact, brings back delete button.\n  deActivateEdit(contact) {\n    let contacts = [...this.state.contacts];\n    var newIndex = this.state.contacts.findIndex(cont => cont.phoneNumber === contact.phoneNumber);\n    console.log(contacts);\n    contacts[newIndex].editMode = false\n    this.setState({ contacts });\n  }\n\n  togglePopup() {\n    this.setState({\n      showPopup: !this.state.showPopup\n    });\n  }\n\n\n\n\n\n\n  render() {\n\n\n    var isListItem = this.state.isListItem;\n\n\n    return (\n      <div className=\"container\">\n        <div className=\"form\">\n\n          <div className=\"header\">\n            <h1>ContactList</h1>\n            <input type=\"image\"\n              height=\"50\"\n              width=\"50\"\n              src={ContactPic}\n              alt=\"\"\n              onClick={this.togglePopup.bind(this)} >\n\n            </input>\n\n          </div>\n\n\n\n          <React.Fragment>\n            <div>\n              <ContactList\n                contacts={this.state.contacts}\n                listOnClick={this.listOnClick}\n                deleteContact={this.deleteContact}\n                activateEdit={this.activateEdit}\n                deActivateEdit={this.deActivateEdit}\n              />\n            </div>\n          </React.Fragment>\n\n        </div>\n\n\n\n        {this.state.showPopup ?\n\n          <React.Fragment>\n            <div>\n              <AddContact\n                contacts={this.state.contacts}\n                backToHome={this.backToHome}\n                addToList={this.addToList.bind(this)}\n                incrementId={this.incrementId.bind(this)}\n\n\n              />\n\n            </div>\n          </React.Fragment>\n          : null\n        }\n\n\n\n\n        {this.state.showUpdateContact ?\n\n\n          <UpdateContact\n            isListItem={isListItem}\n            backToHome={this.backToHome}\n            name={this.state.name}\n            phoneNumber={this.state.phoneNumber}\n            email={this.state.email}\n            id={this.state.id}\n            contacts={this.state.contacts}\n            updateValue={this.updateValue}\n            updateList={this.updateList}\n            index={this.state.index}\n            toggleUpdate={this.toggleUpdate}\n          />\n\n          : null}\n      </div>\n    )\n  }\n\n\n\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
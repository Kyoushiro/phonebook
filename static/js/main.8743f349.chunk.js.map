{"version":3,"sources":["images/arrowLeft.svg","images/delete.svg","images/cancel.svg","images/accept.svg","images/user-plus-solid.svg","components/contactForm.jsx","components/phoneNumberValidation.jsx","components/emailValidation.jsx","components/addContact.jsx","components/updateContact.jsx","components/contactList.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","ContactForm","props","state","name","phoneNumber","email","emailWrong","phoneNumberWrong","statusHandler","bind","numberHandler","handleSubmit","getFormValues","handleUpdateContact","validatePhoneNumber","validateEmail","validateForm","this","setState","event","target","value","test","preventDefault","addContact","contact","id","updateContact","number","contacts","isListItem","contactList","checkFail","length","undefined","regex","some","filteredId","findIndex","obj","filteredPhone","phoneNumberValidation","em","split","emailValidation","Fragment","className","onSubmit","title","type","defaultValue","onChange","cancel","Component","AddContact","newContact","addContactToDatabase","incrementId","slice","push","addToList","backToHome","Infinity","fetch","method","headers","body","JSON","stringify","then","result","json","addContactToList","onClick","cancelAddContact","updateContactInDB","updateList","index","toggleUpdate","height","width","src","BackArrow","alt","cancelUpdateContact","ContactList","filtered","confirmDelete","search","newList","filter","item","searchName","toString","toLowerCase","searchEmail","includes","deleteContact","prevState","activateEdit","deActivateEdit","listOnClick","prevProps","refs","searchInput","placeholder","ref","map","key","handleClick","style","cursor","editMode","Accept","Cancel","Delete","App","isHomeOpen","isAddContactOpen","showPopup","showUpdateContact","updateValue","getContactsFromDB","deleteContactFromDB","Math","max","newIndex","cont","filteredList","res","Object","values","ContactPic","togglePopup","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8743f349.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/arrowLeft.713fe29d.svg\";","module.exports = __webpack_public_path__ + \"static/media/delete.da296998.svg\";","module.exports = __webpack_public_path__ + \"static/media/cancel.2c5552a1.svg\";","module.exports = __webpack_public_path__ + \"static/media/accept.ce8e2a41.svg\";","module.exports = __webpack_public_path__ + \"static/media/user-plus-solid.7465375f.svg\";","import React, { Component } from \"react\";\r\nimport \"../App.css\";\r\nimport emailValidation from \"./emailValidation\";\r\nimport phoneNumberValidation from \"./phoneNumberValidation\";\r\n\r\nclass ContactForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            name: \"\",\r\n            phoneNumber: \"\",\r\n            email: \"\",\r\n            emailWrong: false,\r\n            phoneNumberWrong: false\r\n        }\r\n\r\n        var contacts = [];\r\n\r\n        this.statusHandler = this.statusHandler.bind(this);\r\n        this.numberHandler = this.numberHandler.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.getFormValues = this.getFormValues.bind(this);\r\n        this.handleUpdateContact = this.handleUpdateContact.bind(this);\r\n        this.validatePhoneNumber = this.validatePhoneNumber.bind(this);\r\n        this.validateEmail = this.validateEmail.bind(this);\r\n        this.validateForm = this.validateForm.bind(this);\r\n    }\r\n\r\n    // Gets form values from parent. Empty if it's add contact and filled with contact data if it's list item\r\n\r\n    getFormValues() {\r\n        var name = this.props.name;\r\n        var phoneNumber = this.props.phoneNumber;\r\n        var email = this.props.email;\r\n        this.setState({\r\n            name: name,\r\n            phoneNumber: phoneNumber,\r\n            email: email\r\n        })\r\n\r\n\r\n    }\r\n    // if listitem, gives state contact values from prop. Else it gives them empty values\r\n    componentDidMount() {\r\n\r\n        this.getFormValues();\r\n    }\r\n\r\n\r\n    // Updates input text when writing\r\n    statusHandler(event) {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n    // only allows numbers and + sign to be written\r\n    numberHandler(event) {\r\n        const regex = /^[0-9\\b\\+]+$/;\r\n        if (event.target.value === \"\" || regex.test(event.target.value) === true) {\r\n\r\n            this.setState({ [event.target.name]: event.target.value })\r\n        }\r\n    }\r\n\r\n    // When user presses save, adds contact\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        var name = event.target.name.value;\r\n        var phoneNumber = event.target.phoneNumber.value;\r\n        var email = event.target.email.value;\r\n\r\n        this.props.addContact(name, phoneNumber, email);\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    // updates the contact\r\n\r\n    handleUpdateContact(event) {\r\n        event.preventDefault();\r\n        var name = event.target.name.value;\r\n        var phoneNumber = event.target.phoneNumber.value;\r\n        var email = event.target.email.value;\r\n        var id = this.props.id;\r\n        var contact = { 'name': name, 'phoneNumber': phoneNumber, 'email': email, 'id': id };\r\n\r\n        this.props.updateContact(contact)\r\n\r\n    }\r\n    // Validates phonenumber\r\n    validatePhoneNumber(number, contacts, isListItem, id) {\r\n        var checkFail = phoneNumberValidation(number, contacts, isListItem, id);\r\n\r\n        return checkFail;\r\n    }\r\n    // Validates email\r\n    validateEmail(em) {\r\n        var checkFail = emailValidation(em);\r\n        return checkFail;\r\n    }\r\n    //validates form and then either calls update contact method or add contact method\r\n    validateForm(event) {\r\n        event.preventDefault();\r\n        var emailWrong = this.validateEmail(event.target.email.value);\r\n        var phoneNumberWrong = this.validatePhoneNumber(event.target.phoneNumber.value, this.props.contacts, this.props.isListItem, this.props.id);\r\n\r\n        //checks if email validation and phonenumber validation went through\r\n        if (emailWrong === false && phoneNumberWrong === false) {\r\n            if (this.props.isListItem) {\r\n                this.handleUpdateContact(event);\r\n            }\r\n            else {\r\n                this.handleSubmit(event);\r\n            }\r\n        }\r\n        // if email or phonenumber validation didn't go through, change their state to wrong\r\n        else {\r\n            this.setState({\r\n                emailWrong: emailWrong,\r\n                phoneNumberWrong: phoneNumberWrong\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"contactContainer\">\r\n                    <div className=\"contactForm\">\r\n\r\n\r\n                        <form className=\"form\" onSubmit={this.validateForm}>\r\n                            {this.props.title}\r\n                            <label>\r\n                                Name:\r\n                    </label>\r\n                            <br />\r\n                            <input\r\n                                name=\"name\"\r\n                                type=\"text\"\r\n                                defaultValue={this.props.name}\r\n                                onChange={this.statusHandler}\r\n                            />\r\n\r\n                            <br />\r\n                            <br />\r\n                            <label>\r\n                                Phonenumber:\r\n                    </label>\r\n                            <br />\r\n                            <input\r\n                                name=\"phoneNumber\"\r\n                                type=\"text\"\r\n                                defaultValue={this.props.phoneNumber}\r\n                                onChange={this.numberHandler}\r\n                            />\r\n                            {\r\n                                this.state.phoneNumberWrong === true &&\r\n                                <p>Either phoneNumber is not in correct format or it already exists in contacts</p>\r\n                            }\r\n\r\n                            <br />\r\n                            <br />\r\n\r\n                            <label>\r\n                                Email:\r\n                    </label>\r\n                            <br />\r\n                            <input\r\n                                name=\"email\"\r\n                                type=\"email\"\r\n                                defaultValue={this.props.email}\r\n                                onChange={this.statusHandler}\r\n                            />\r\n                            {\r\n                                this.state.emailWrong === true &&\r\n                                <p>Please write valid email</p>\r\n                            }\r\n\r\n                            <br /> <br />\r\n                            {this.props.cancel}\r\n                            <div className=\"divider\" />\r\n                            <input\r\n                                type=\"submit\"\r\n                                value=\"Save\"\r\n                                className=\"buttons\"\r\n                            />\r\n                        </form>\r\n\r\n\r\n                    </div>\r\n                </div>\r\n\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n\r\n\r\n}\r\nexport default ContactForm;","export default function phoneNumberValidation(number, contactList, isListItem, id) {\r\n    var checkFail = false;\r\n\r\n\r\n    if (number.length == 0 || number === undefined) {\r\n        checkFail = true\r\n    }\r\n    else {\r\n        var regex = /^((04[0-9]{1})(\\s?|-?)|019(\\s?|-?)|[+]?358(\\s?|-?)19|050(\\s?|-?)|0457(\\s?|-?)|[+]?358(\\s?|-?)50|0358(\\s?|-?)50|00358(\\s?|-?)50|[+]?358(\\s?|-?)4[0-9]{1}|0358(\\s?|-?)4[0-9]{1}|00358(\\s?|-?)4[0-9]{1})(\\s?|-?)(([0-9]{3,4})(\\s|\\-)?[0-9]{2,3})$/;\r\n        if (regex.test(number) === false) {\r\n            checkFail = true;\r\n\r\n        }\r\n\r\n        //checks if contact number already exists in contact list\r\n        if (contactList.some(contact => contact.phoneNumber === number) === true) {\r\n            // Checks if it is currently a list item.\r\n            if (isListItem) {\r\n                var filteredId = contactList.findIndex(obj => obj.id === id);\r\n                var filteredPhone = contactList.findIndex(obj => obj.phoneNumber === number);\r\n                // checks if the index of id and the phonenumber match.\r\n                if (regex.test(number) === false || filteredId !== filteredPhone) {\r\n                    checkFail = true;\r\n                }\r\n                else {\r\n                    checkFail = false\r\n                }\r\n            }\r\n            else {\r\n                checkFail = true;\r\n            }\r\n        }\r\n\r\n\r\n\r\n        else {\r\n            checkFail = false;\r\n        }\r\n    }\r\n    return checkFail;\r\n}","export default function emailValidation(em) {\r\n    var checkFail = false;\r\n\r\n    if (em.length == 0 || em === undefined) {\r\n        checkFail = true;\r\n    }\r\n    else {\r\n        var splitEmail = em.split(\"@\");\r\n        if (splitEmail[0].length <= 2) {\r\n            checkFail = true;\r\n        }\r\n    }\r\n    return checkFail;\r\n}","import React, { Component } from \"react\";\r\nimport ContactForm from \"./contactForm\";\r\n\r\nclass AddContact extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            newContact: true,\r\n            isListItem: false\r\n\r\n        }\r\n        this.addContactToDatabase = this.addContactToDatabase.bind(this);\r\n    }\r\n\r\n\r\n\r\n\r\n    // adds contact to list and takes user back to homepage\r\n    addContactToList(name, phoneNumber, email) {\r\n        var obj = { 'name': name, 'phoneNumber': phoneNumber, 'email': email, 'editMode': false, 'id': this.props.incrementId() };\r\n        const newContact = this.props.contacts.slice();\r\n        newContact.push(obj);\r\n        if (obj.id < 1) {\r\n            obj.id = 1;\r\n        }\r\n\r\n        this.props.addToList(newContact);\r\n        this.addContactToDatabase(name, phoneNumber, email, obj.id);\r\n\r\n\r\n        this.props.backToHome();\r\n\r\n    }\r\n    // adds contact to database\r\n    addContactToDatabase(name, phoneNumber, email, id) {\r\n        if (id === -Infinity) {\r\n            id = 1;\r\n        }\r\n        fetch(`https://phonebook-277012.ey.r.appspot.com/add_user?name=${name}&phoneNumber=${phoneNumber}&email=${email}&id=${id}`, {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-type\": \"application/json\",\r\n                'Accept': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                \"name\": name,\r\n                \"phoneNumber\": phoneNumber,\r\n                \"email\": email,\r\n                \"id\": id\r\n            })\r\n\r\n\r\n\r\n        })\r\n            .then((result) => result.json())\r\n    }\r\n    // Takes user back to homepage\r\n    cancelAddContact() {\r\n        this.props.backToHome();\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"addContact\">\r\n\r\n\r\n                <React.Fragment>\r\n                    <ContactForm\r\n                        addContact={this.addContactToList.bind(this)}\r\n                        contacts={this.props.contacts}\r\n                        newContact={this.state.newContact}\r\n                        cancel={<input className=\"button\" type=\"button\" value=\"Cancel\" onClick={this.cancelAddContact.bind(this)}></input>}\r\n                        title={<h1>Add Contact</h1>}\r\n                        isListItem={this.state.isListItem}\r\n\r\n                    />\r\n                </React.Fragment>\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n}\r\nexport default AddContact;","import React, { Component } from \"react\";\r\nimport ContactForm from \"./contactForm\";\r\nimport BackArrow from \"../images/arrowLeft.svg\";\r\n\r\nclass updateContact extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.updateContactInDB = this.updateContactInDB.bind(this);\r\n    }\r\n    // Validates contact and then updates the contact\r\n    updateContact(contact) {\r\n        this.props.updateList(contact, this.props.index);\r\n        this.updateContactInDB(contact.name, contact.phoneNumber, contact.email, contact.id)\r\n        this.props.toggleUpdate();\r\n\r\n\r\n    }\r\n\r\n    // Takes user back to homepage if back arrow is pressed\r\n    cancelUpdateContact() {\r\n        this.props.toggleUpdate();\r\n    }\r\n\r\n    // adds contact to database\r\n    updateContactInDB(name, phoneNumber, email, id) {\r\n        fetch(`https://phonebook-277012.ey.r.appspot.com/update_user?name=${name}&phoneNumber=${phoneNumber}&email=${email}&id=${id}`, {\r\n            method: \"PUT\",\r\n            headers: {\r\n                \"Content-type\": \"application/json\",\r\n                'Accept': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                \"name\": name,\r\n                \"phoneNumber\": phoneNumber,\r\n                \"email\": email,\r\n                \"id\": id\r\n            })\r\n\r\n\r\n\r\n        })\r\n        //.then((result) => result.json())\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n\r\n            <ContactForm\r\n                isListItem={this.props.isListItem}\r\n                name={this.props.name}\r\n                phoneNumber={this.props.phoneNumber}\r\n                email={this.props.email}\r\n                updateContact={this.updateContact.bind(this)}\r\n                contacts={this.props.contacts}\r\n                index={this.props.index}\r\n                id={this.props.id}\r\n                toggleUpdate={this.props.toggleUpdate}\r\n                cancel={<input type=\"image\" height=\"30\" width=\"30\" src={BackArrow} alt=\"\" value=\"Cancel\" onClick={this.cancelUpdateContact.bind(this)}></input>}\r\n                title={<h1>View Contact</h1>}\r\n            />\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default updateContact;","import React, { Component } from \"react\";\r\nimport Delete from \"../images/delete.svg\";\r\nimport Cancel from \"../images/cancel.svg\";\r\nimport Accept from \"../images/accept.svg\";\r\n\r\n//ToDo: \r\n/*\r\n @todo move HTML content to its own components, add/update forms\r\n @todo move validation functions to separate validation.js file\r\n @remove unused code\r\n @comment a bit more on function that do logic operations\r\n*/\r\nclass ContactList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            filtered: [],\r\n            confirmDelete: {},\r\n\r\n        }\r\n\r\n        this.search = this.search.bind(this);\r\n\r\n    }\r\n    // Allows user to search contacts by name and email\r\n    search(event) {\r\n        let currentList = [];\r\n        let newList = [];\r\n\r\n        // if search field has a value, do the method\r\n\r\n        if (event.target.value !== \"\") {\r\n            currentList = this.props.contacts;\r\n            // Put everything in lowercase, because filter is case sensitive\r\n            newList = currentList.filter(item => {\r\n                const searchName = item.name.toString().toLowerCase();\r\n                const searchEmail = item.email.toString().toLowerCase();\r\n                const filter = event.target.value.toString().toLowerCase();\r\n                // returns new list that includes either name or email\r\n                return (\r\n                    searchName.includes(filter) +\r\n                    searchEmail.includes(filter)\r\n                );\r\n            });\r\n        } else {\r\n            newList = this.props.contacts;\r\n        }\r\n        this.setState({\r\n            filtered: newList\r\n        })\r\n\r\n    }\r\n\r\n\r\n    // Checks which button is clicked and acts accordingly.\r\n    handleClick(contact, index, event) {\r\n\r\n        // if delete is pressed, delete a contact from list\r\n        if (event.target.name === \"deleteButton\") {\r\n            this.props.deleteContact(contact);\r\n\r\n            this.setState(prevState => ({\r\n                filtered: prevState.filtered.filter(contact => contact !== contact)\r\n            }));\r\n\r\n        }\r\n        // if confirm button is pressed, activates edit mode\r\n        else if (event.target.name === \"deleteConfirm\") {\r\n\r\n            this.props.activateEdit(contact, index, this.state.filtered);\r\n            this.setState(prevState => ({\r\n                filtered: prevState.filtered.filter(contact => contact !== contact)\r\n            }));\r\n\r\n        }\r\n        // if cancel button is pressed, deactivates edit mode\r\n        else if (event.target.name === \"deleteCancel\") {\r\n            this.props.deActivateEdit(contact);\r\n\r\n        }\r\n        // opens update contact view on the clicked contact\r\n        else {\r\n            this.props.listOnClick(contact, index);\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n\r\n        var newList = [];\r\n        // Compares contact lists and if there's a difference, filters list according to search input, if there is text\r\n        if (prevProps.contacts !== this.props.contacts) {\r\n            //Filters according to search input if there is text\r\n            if (this.refs.searchInput.value !== \"\") {\r\n                newList = this.props.contacts.filter(item => {\r\n                    const searchName = item.name.toString().toLowerCase();\r\n                    const searchEmail = item.email.toString().toLowerCase();\r\n                    const filter = this.refs.searchInput.value.toString().toLowerCase();\r\n\r\n                    return (\r\n                        searchName.includes(filter) +\r\n                        searchEmail.includes(filter)\r\n                    );\r\n                });\r\n            }\r\n            else {\r\n                newList = this.props.contacts\r\n            }\r\n            this.setState({\r\n                filtered: newList\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    render() {\r\n\r\n\r\n\r\n        return (\r\n\r\n\r\n            <div className=\"contactList\">\r\n\r\n                <input type=\"text\"\r\n                    className=\"inputSearch\"\r\n                    placeholder=\"Search...\"\r\n                    onChange={this.search}\r\n                    ref=\"searchInput\"\r\n                />\r\n\r\n                <ul>\r\n                    {this.state.filtered.map((contact, index) =>\r\n                        <li key={contact.id}\r\n                            onClick={(event) =>\r\n                                this.handleClick(contact, index, event)}\r\n                            style={{ cursor: 'pointer' }}\r\n                        >\r\n                            <div className=\"cell\">{contact.name}</div>\r\n                            {contact.editMode ? [<input\r\n                                type=\"image\"\r\n                                name=\"deleteButton\"\r\n                                src={Accept}\r\n                                alt=\"\"\r\n                                width=\"20\"\r\n                                height=\"20\"\r\n\r\n                            />, <input\r\n                                type=\"image\"\r\n                                alt=\"\"\r\n                                name=\"deleteCancel\"\r\n                                src={Cancel}\r\n                                width=\"20\"\r\n                                height=\"20\"\r\n                            />]\r\n                                :\r\n                                <input\r\n                                    type=\"image\"\r\n                                    name=\"deleteConfirm\"\r\n                                    src={Delete}\r\n                                    alt=\"\"\r\n                                    width=\"20\"\r\n                                    height=\"20\"\r\n                                />}\r\n                        </li>)}\r\n                </ul>\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ContactList;","import React, { Component } from 'react';\nimport AddContact from './components/addContact';\nimport UpdateContact from \"./components/updateContact\";\nimport ContactList from \"./components/contactList\";\nimport \"./App.css\";\nimport ContactPic from \"./images/user-plus-solid.svg\";\n\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isHomeOpen: true,\n      isAddContactOpen: false,\n      isListItem: false,\n      index: \"\",\n      filtered: [],\n      id: 1,\n      showPopup: false,\n      showUpdateContact: false,\n\n      contacts: []\n\n    }\n\n    this.backToHome = this.backToHome.bind(this);\n    this.updateValue = this.updateValue.bind(this);\n    this.updateList = this.updateList.bind(this);\n    this.deleteContact = this.deleteContact.bind(this);\n    this.listOnClick = this.listOnClick.bind(this);\n    this.activateEdit = this.activateEdit.bind(this);\n    this.deActivateEdit = this.deActivateEdit.bind(this);\n    this.toggleUpdate = this.toggleUpdate.bind(this);\n    this.getContactsFromDB = this.getContactsFromDB.bind(this);\n    this.deleteContactFromDB = this.deleteContactFromDB.bind(this);\n\n\n    //this.listOnClick = this.listOnClick.bind(this);\n\n\n  }\n\n\n  // add the new contact to list\n  addToList(obj) {\n    this.setState({\n      contacts: obj\n    })\n  }\n\n  incrementId() {\n    const maxID = Math.max(...this.state.contacts.map(contact => contact.id));\n    return maxID + 1\n  }\n\n  // update selected contact\n\n  updateList(contact, index) {\n\n    let contacts = [...this.state.contacts];\n    var newIndex = contacts.findIndex(cont => cont.id === contact.id);\n    let item = { ...contacts[index] };\n    item.name = contact.name;\n    item.phoneNumber = contact.phoneNumber;\n    item.email = contact.email;\n    item.id = contact.id;\n    contacts[newIndex] = item;\n    this.setState({ contacts });\n\n  }\n\n\n\n  // Change page view to AddContact\n  transferToAddContact() {\n    this.setState({\n      isAddContactOpen: true,\n      isHomeOpen: false\n    });\n\n  }\n  // When person clicks on the contact, open that contacts detail page\n  listOnClick(contact, index) {\n\n    this.setState({\n      isListItem: true,\n      name: contact.name,\n      phoneNumber: contact.phoneNumber,\n      email: contact.email,\n      index: [index],\n      id: contact.id\n    })\n    this.toggleUpdate();\n\n  }\n  // Change view back to Homepage\n  backToHome() {\n    this.setState({\n      showPopup: !this.state.showPopup,\n      isListItem: false,\n    });\n  }\n  toggleUpdate() {\n    this.setState({\n      showUpdateContact: !this.state.showUpdateContact\n    })\n  }\n  // Allows to write into input fields\n  updateValue(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    })\n  }\n  // Delete contact from list\n  deleteContact(contacts) {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== contacts.id)\n    }));\n    this.deleteContactFromDB(contacts.id);\n\n  }\n  // Deletes contact from database\n  deleteContactFromDB(id) {\n    fetch(`https://phonebook-277012.ey.r.appspot.com/delete_user?id=${id}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\",\n        'Accept': 'application/json'\n      }\n    })\n  }\n\n  // when user clicks delete button, opens up confirmation buttons\n  activateEdit(contact, index, filteredList) {\n    let contacts = [...this.state.contacts];\n\n    var newIndex = contacts.findIndex(cont => cont.id === contact.id);\n    contact.editMode = true\n    this.setState({ contacts });\n  }\n  // when user presses cancel when trying to delete a contact, brings back delete button.\n  deActivateEdit(contact) {\n    let contacts = [...this.state.contacts];\n    var newIndex = this.state.contacts.findIndex(cont => cont.phoneNumber === contact.phoneNumber);\n    contacts[newIndex].editMode = false\n    this.setState({ contacts });\n  }\n  //Toggles addContact page to either be shown or hidden\n  togglePopup() {\n    this.setState({\n      showPopup: !this.state.showPopup\n    });\n  }\n  // Gets contacts from database\n  getContactsFromDB() {\n    fetch(\"https://phonebook-277012.ey.r.appspot.com/get_users\")\n      .then(res => res.json())\n      .then(\n        (result) => {\n\n          this.setState({ contacts: Object.values(result) })\n        }\n\n\n      )\n  }\n\n  componentDidMount() {\n    this.getContactsFromDB();\n  }\n\n\n\n\n\n\n  render() {\n\n\n    var isListItem = this.state.isListItem;\n\n\n    return (\n      <div className=\"container\">\n        <div className=\"form\">\n\n          <div className=\"header\">\n            <h1>ContactList</h1>\n            <input type=\"image\"\n              height=\"50\"\n              width=\"50\"\n              src={ContactPic}\n              alt=\"\"\n              onClick={this.togglePopup.bind(this)} >\n\n            </input>\n\n          </div>\n\n\n\n          <React.Fragment>\n            <div>\n              <ContactList\n                contacts={this.state.contacts}\n                listOnClick={this.listOnClick}\n                deleteContact={this.deleteContact}\n                activateEdit={this.activateEdit}\n                deActivateEdit={this.deActivateEdit}\n              />\n            </div>\n          </React.Fragment>\n\n        </div>\n\n\n\n        {this.state.showPopup ?\n\n          <React.Fragment>\n            <div>\n              <AddContact\n                contacts={this.state.contacts}\n                backToHome={this.backToHome}\n                addToList={this.addToList.bind(this)}\n                incrementId={this.incrementId.bind(this)}\n\n\n              />\n\n            </div>\n          </React.Fragment>\n          : null\n        }\n\n\n\n\n        {this.state.showUpdateContact ?\n\n\n          <UpdateContact\n            isListItem={isListItem}\n            backToHome={this.backToHome}\n            name={this.state.name}\n            phoneNumber={this.state.phoneNumber}\n            email={this.state.email}\n            id={this.state.id}\n            contacts={this.state.contacts}\n            updateValue={this.updateValue}\n            updateList={this.updateList}\n            index={this.state.index}\n            toggleUpdate={this.toggleUpdate}\n          />\n\n          : null}\n      </div>\n    )\n  }\n\n\n\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}